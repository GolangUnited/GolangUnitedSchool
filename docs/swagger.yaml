basePath: /api/v1
definitions:
  model.CertificateTemplate:
    properties:
      id:
        example: 1
        type: integer
      template:
        example: some template
        type: string
    type: object
  model.CertificateTemplateList:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      certificate_templates:
        items:
          $ref: '#/definitions/model.CertificateTemplate'
        type: array
    type: object
  model.Contact:
    properties:
      contactTypeID:
        type: integer
      contactValue:
        type: string
      id:
        type: integer
      isPrimary:
        type: boolean
      personID:
        type: integer
    type: object
  model.ContactType:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  model.ContactTypesListDto:
    properties:
      contactTypesList:
        items:
          $ref: '#/definitions/model.ContactType'
        type: array
      metadata:
        $ref: '#/definitions/model.PaginationResponse'
    type: object
  model.ContactsListDto:
    properties:
      contactsList:
        items:
          $ref: '#/definitions/model.Contact'
        type: array
      metadata:
        $ref: '#/definitions/model.PaginationResponse'
    type: object
  model.Course:
    properties:
      end_date:
        type: string
      id:
        type: integer
      start_date:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  model.CourseLecture:
    properties:
      course_id:
        type: integer
      lecture_id:
        type: integer
    type: object
  model.CourseLecturesListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      course_lectures:
        items:
          $ref: '#/definitions/model.CourseLecture'
        type: array
    type: object
  model.CourseList:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      courses:
        items:
          $ref: '#/definitions/model.Course'
        type: array
    type: object
  model.CourseStatus:
    properties:
      course_status_id:
        type: integer
      title:
        maxLength: 20
        minLength: 2
        type: string
    type: object
  model.CourseStatusesListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      courseStatusList:
        items:
          $ref: '#/definitions/model.CourseStatus'
        type: array
    type: object
  model.CourseUpdate:
    properties:
      end_date:
        type: string
      start_date:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  model.Group:
    properties:
      courseId:
        type: integer
      id:
        type: integer
      mentorId:
        type: integer
      title:
        type: string
    type: object
  model.GroupCU:
    properties:
      mentorId:
        type: integer
      title:
        type: string
    type: object
  model.GroupContact:
    properties:
      contact_type_id:
        maximum: 7
        type: integer
      contact_value:
        maxLength: 70
        minLength: 2
        type: string
      group_contact_id:
        type: integer
      group_id:
        type: integer
      is_primary:
        type: boolean
    required:
    - is_primary
    type: object
  model.GroupContactsAddDto:
    properties:
      contact_type_id:
        maximum: 7
        type: integer
      contact_value:
        maxLength: 70
        minLength: 2
        type: string
      group_id:
        type: integer
      is_primary:
        type: boolean
    required:
    - is_primary
    type: object
  model.GroupContactsListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      groupContacts:
        items:
          $ref: '#/definitions/model.GroupContact'
        type: array
    type: object
  model.Homework:
    properties:
      id:
        type: integer
      lecture_id:
        type: integer
      max_score:
        type: number
      task:
        type: string
      title:
        type: string
    type: object
  model.HomeworkList:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      homeworks:
        items:
          $ref: '#/definitions/model.Homework'
        type: array
    type: object
  model.Interview:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      mentorID:
        type: integer
      note:
        type: string
      score:
        type: integer
      studentID:
        type: integer
    type: object
  model.Lecture:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  model.LectureList:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      lectures:
        items:
          $ref: '#/definitions/model.Lecture'
        type: array
    type: object
  model.Mentor:
    properties:
      mentor_id:
        type: integer
    type: object
  model.MentorNote:
    properties:
      created_at:
        type: string
      mentor_id:
        type: integer
      mentor_note_id:
        type: integer
      note:
        maxLength: 255
        minLength: 2
        type: string
      student_id:
        type: integer
    type: object
  model.MentorNotesListDto:
    properties:
      mentorNoteList:
        items:
          $ref: '#/definitions/model.MentorNote'
        type: array
    type: object
  model.MentorsListDto:
    properties:
      mentorList:
        items:
          $ref: '#/definitions/model.Mentor'
        type: array
    type: object
  model.NewContactTypeDto:
    properties:
      title:
        type: string
    type: object
  model.NewMentorNoteDto:
    properties:
      created_at:
        type: string
      mentor_id:
        type: integer
      note:
        maxLength: 255
        minLength: 2
        type: string
      student_id:
        type: integer
    type: object
  model.NewPersonDto:
    properties:
      firsName:
        type: string
      lastName:
        type: string
      login:
        type: string
      passwd:
        type: string
      patronymic:
        type: string
      roleId:
        type: string
    type: object
  model.NewStudentNoteDto:
    properties:
      created_at:
        type: string
      note:
        maxLength: 255
        minLength: 2
        type: string
    type: object
  model.NewStudentNoteTypeDto:
    properties:
      title:
        maxLength: 10
        minLength: 2
        type: string
    type: object
  model.Operation:
    properties:
      id:
        type: integer
      isLogging:
        type: boolean
      operationType:
        $ref: '#/definitions/model.OperationType'
      title:
        type: string
    type: object
  model.OperationLog:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      operation:
        $ref: '#/definitions/model.Operation'
      personID:
        type: integer
      roleID:
        type: integer
    type: object
  model.OperationType:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  model.PaginationResponse:
    properties:
      page:
        type: integer
      page_count:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  model.Person:
    properties:
      deleted:
        type: boolean
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      login:
        maxLength: 50
        minLength: 2
        type: string
      passwd:
        maxLength: 20
        minLength: 8
        type: string
      patronymic:
        maxLength: 50
        minLength: 2
        type: string
      person_id:
        type: integer
      role_id:
        maximum: 6
        minimum: 1
        type: integer
      updated_at:
        type: string
    required:
    - first_name
    - last_name
    - login
    - passwd
    - role_id
    type: object
  model.PersonListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      persons_dto:
        items:
          $ref: '#/definitions/model.Person'
        type: array
    type: object
  model.ResponseMessage:
    properties:
      id:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  model.Role:
    properties:
      id:
        type: integer
      isReadOnly:
        type: boolean
      roleName:
        type: string
    type: object
  model.RoleCU:
    properties:
      isReadOnly:
        type: boolean
      roleName:
        type: string
    type: object
  model.Student:
    properties:
      student_id:
        minimum: 0
        type: integer
    required:
    - student_id
    type: object
  model.StudentCertificate:
    properties:
      certificate_template_id:
        type: integer
      course_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      student_id:
        type: integer
    type: object
  model.StudentCertificateList:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      student_certificates:
        items:
          $ref: '#/definitions/model.StudentCertificate'
        type: array
    type: object
  model.StudentCertificatesListDto:
    properties:
      metadata:
        $ref: '#/definitions/model.PaginationResponse'
      studentCertificatesList:
        items:
          $ref: '#/definitions/model.StudentCertificate'
        type: array
    type: object
  model.StudentGroup:
    properties:
      group_id:
        type: integer
      student_id:
        type: integer
    type: object
  model.StudentGroupListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      student_group_list:
        items:
          $ref: '#/definitions/model.StudentGroup'
        type: array
    type: object
  model.StudentHomework:
    properties:
      finished_at:
        type: string
      homework_id:
        type: integer
      id:
        type: integer
      score:
        type: number
      started_at:
        type: string
      student_id:
        type: integer
    type: object
  model.StudentHomeworksListDto:
    properties:
      metaData:
        $ref: '#/definitions/model.PaginationResponse'
      studentsHomeworksList:
        items:
          $ref: '#/definitions/model.StudentHomework'
        type: array
    type: object
  model.StudentNote:
    properties:
      created_at:
        type: string
      note:
        maxLength: 255
        minLength: 2
        type: string
      student_id:
        type: integer
      student_note_id:
        type: integer
      student_note_type_id:
        type: integer
    type: object
  model.StudentNoteType:
    properties:
      student_note_type_id:
        type: integer
      title:
        maxLength: 10
        minLength: 2
        type: string
    type: object
  model.StudentNoteTypesListDto:
    properties:
      studentNoteTypeList:
        items:
          $ref: '#/definitions/model.StudentNoteType'
        type: array
    type: object
  model.StudentNotesListDto:
    properties:
      studentId:
        type: integer
      studentNoteList:
        items:
          $ref: '#/definitions/model.StudentNote'
        type: array
    type: object
  model.StudentsListDto:
    properties:
      metaData:
        $ref: '#/definitions/model.PaginationResponse'
      studentList:
        items:
          $ref: '#/definitions/model.Student'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: '### _API for student info collection service._'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: GolangUnitedSchool
  version: "1.0"
paths:
  /certificate-templates:
    get:
      operationId: get-all-certificate-templates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CertificateTemplateList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the certificate template list
      tags:
      - certificates
    post:
      description: добавляет новый шаблон сертификата
      operationId: create-certificate-template
      parameters:
      - description: certificate template
        in: body
        name: certificate_template
        required: true
        schema:
          $ref: '#/definitions/model.CertificateTemplate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new certificate template to the certificate template list
      tags:
      - courses
  /certificate-templates/{id}:
    delete:
      description: удаляет шаблон сертификата с указанным id
      operationId: delete-certificate-template-by-id
      parameters:
      - description: certificate template id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a certificate template by ID
      tags:
      - courses
    get:
      description: возвращает шаблон сертификата с указанным id
      operationId: get-certificate-template-by-id
      parameters:
      - description: certificate template id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CertificateTemplate'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a certificate template by ID
      tags:
      - courses
    put:
      description: изменяет существующий щаблон сертификата с указанным id
      operationId: update-certificate-template-by-id
      parameters:
      - description: certificate template id
        in: path
        name: id
        required: true
        type: string
      - description: certificate template
        in: body
        name: certificate_template
        required: true
        schema:
          $ref: '#/definitions/model.CertificateTemplate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a certificate template by ID
      tags:
      - courses
  /courses:
    get:
      description: возвращает все курсы
      operationId: get-all-courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the course list
      tags:
      - courses
    post:
      description: создает новый курс
      operationId: create-course
      parameters:
      - description: course
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.Course'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new course to the course list
      tags:
      - courses
  /courses/{course_id}/lectures:
    get:
      description: возвращает все лекции определенного курса
      operationId: get-course-lectures-by-course-id
      parameters:
      - description: course_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseLecturesListDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a course lecture by id
      tags:
      - courseLectures
  /courses/{course_id}/lectures/{lecture_id}:
    get:
      description: возвращает лекцию с указанным lecture_id с курса course_id
      operationId: get-lecture-by-id-from-course
      parameters:
      - description: course_id
        in: path
        name: course_id
        required: true
        type: string
      - description: lecture_id
        in: path
        name: lecture_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseLecture'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get concrete lecture from course
      tags:
      - courseLectures
  /courses/{id}:
    delete:
      description: удаляет курс с указанным id
      operationId: delete-course-by-id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a course by ID
      tags:
      - courses
    get:
      description: возвращает курс с указанным id
      operationId: get-course-by-id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Course'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a course by ID
      tags:
      - courses
    put:
      description: изменяет курс с указанным id
      operationId: update-course-by-id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: course
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.CourseUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a course by ID
      tags:
      - courses
  /courses/lectures:
    get:
      description: возвращает список всех лекций всех курсов
      operationId: get-all-course-lectures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseLecturesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all course lectures
      tags:
      - courseLectures
    post:
      description: добавить новую лекцию на курс
      operationId: add-course-lecture-by-id
      parameters:
      - description: course_lecture
        in: body
        name: course_lecture
        required: true
        schema:
          $ref: '#/definitions/model.CourseLecture'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new course lecture
      tags:
      - courseLectures
  /courses/lectures/{lecture_id}:
    delete:
      description: удалить лекцию с указанным lecture_id
      operationId: delete-course-lecture-by-id
      parameters:
      - description: course_lecture_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a course lecture by id
      tags:
      - courseLectures
    put:
      description: отредактировать лекцию курса с указанным lecture_id
      operationId: update-course-lecture-by-id
      parameters:
      - description: lecture_id
        in: path
        name: id
        required: true
        type: string
      - description: course_lecture
        in: body
        name: course_lecture
        required: true
        schema:
          $ref: '#/definitions/model.CourseLecture'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update course lecture by id
      tags:
      - courseLectures
  /courses/name/{course_name}:
    get:
      operationId: get-course-by-name
      parameters:
      - description: course name
        in: path
        name: course_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Course'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a course by name
      tags:
      - courses
  /courses/statuses:
    get:
      description: возвращает список всех статусов курса
      operationId: get-all-course-statuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseStatusesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all course statuses
      tags:
      - courseStatuses
    post:
      description: создает новый статус курса
      operationId: add-course-status
      parameters:
      - description: new_course_status
        in: body
        name: new_course_status
        required: true
        schema:
          $ref: '#/definitions/model.CourseStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new course status
      tags:
      - courseStatuses
  /courses/statuses/{status_id}:
    delete:
      description: удаляет статус курса с указанным status_id
      operationId: delete-course-status
      parameters:
      - description: status_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete course status
      tags:
      - courseStatuses
    get:
      description: возвращает статус курса с status_id
      operationId: get-course-status
      parameters:
      - description: status_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseStatus'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get course status by id
      tags:
      - courseStatuses
    put:
      description: изменяет статус курса с указанным status_id
      operationId: put-course-status
      parameters:
      - description: status_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update course status
      tags:
      - courseStatuses
  /groups:
    get:
      description: возвращает все группы
      operationId: get-all-groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Group'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the group list
      tags:
      - groups
    post:
      description: создает новую группу
      operationId: create-group
      parameters:
      - description: group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupCU'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new item to the group list
      tags:
      - groups
  /groups/{group_id}/contacts:
    get:
      description: возвращает все контакты группы с указанным group_id
      operationId: get-group-contacts-by-id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GroupContactsListDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get group contacts by  group id
      tags:
      - groupContacts
  /groups/{group_id}/contacts/{group_contact_id}:
    get:
      description: возвращает контакт group_contact_id группы с group_id
      operationId: get-group-contact
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      - description: group_contact_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GroupContact'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get group contact
      tags:
      - groupContacts
  /groups/{id}:
    delete:
      description: удаляет группу с указанным id
      operationId: delete-group-by-id
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a group by ID
      tags:
      - groups
    get:
      description: возвращает группу с указанным id
      operationId: get-group-by-id
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Group'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a group by ID
      tags:
      - groups
    post:
      operationId: update-group-by-id
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: string
      - description: group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupCU'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a group by ID
      tags:
      - groups
    put:
      description: изменяет группу с указанным id
      operationId: update-group-by-id
      parameters:
      - description: group id
        in: path
        name: id
        required: true
        type: string
      - description: group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.GroupCU'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a group by ID
      tags:
      - groups
  /groups/contacts:
    get:
      description: возвращает все контакты всех группы
      operationId: get-all-groups-contacts
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GroupContactsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all group contacts
      tags:
      - groupContacts
    post:
      description: добавляет новый контакт группы
      operationId: add-group-contact
      parameters:
      - description: group contact
        in: body
        name: group_contact
        required: true
        schema:
          $ref: '#/definitions/model.GroupContactsAddDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new group contact
      tags:
      - groupContacts
  /groups/contacts/{group_contact_id}:
    delete:
      description: удаляет контакт группы
      operationId: delete-group-contact-by-id
      parameters:
      - description: group_contact_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete group contact by id
      tags:
      - groupContacts
    put:
      description: изменяет контакт группы
      operationId: update-group-contact-by-id
      parameters:
      - description: group_contact_id
        in: path
        name: id
        required: true
        type: string
      - description: group contact
        in: body
        name: group_contact
        required: true
        schema:
          $ref: '#/definitions/model.GroupContactsAddDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update group contact
      tags:
      - groupContacts
  /homeworks:
    get:
      description: возвращает все домашние работы
      operationId: get-all-homeworks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HomeworkList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the homework list
      tags:
      - homeworks
    post:
      description: добавляет новую домашнюю работу
      operationId: create-homework
      parameters:
      - description: homework
        in: body
        name: homework
        required: true
        schema:
          $ref: '#/definitions/model.Homework'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new homework to the homework list
      tags:
      - homeworks
  /homeworks/{id}:
    delete:
      description: удаляет домашнюю работу с указанным id
      operationId: delete-homework-by-id
      parameters:
      - description: homework id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a homework by ID
      tags:
      - homeworks
    get:
      description: возвращает домашнюю работу с указанным id
      operationId: get-homework-by-id
      parameters:
      - description: homework id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Homework'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a homework by ID
      tags:
      - homeworks
    put:
      description: изменяет домашнюю работу с указанным id
      operationId: update-homework-by-id
      parameters:
      - description: homework id
        in: path
        name: id
        required: true
        type: string
      - description: homework
        in: body
        name: homework
        required: true
        schema:
          $ref: '#/definitions/model.Homework'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a homework by ID
      tags:
      - homeworks
  /interview/{id}:
    delete:
      description: удаляет интервью с указанным id
      operationId: delete-interview-by-id
      parameters:
      - description: interview id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a interview by ID
      tags:
      - interviews
    get:
      description: возвращает интервью с указанным id
      operationId: get-interview-by-id
      parameters:
      - description: interview id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Interview'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a interview by ID
      tags:
      - interviews
    put:
      description: изменяет интервью с указанным id
      operationId: update-interview-by-id
      parameters:
      - description: interview id
        in: path
        name: id
        required: true
        type: string
      - description: interview
        in: body
        name: interview
        required: true
        schema:
          $ref: '#/definitions/model.Interview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a interview by ID
      tags:
      - interviews
  /interviews:
    get:
      description: возвращает все интервью
      operationId: get-all-interviews
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Interview'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the interview list
      tags:
      - interviews
    post:
      description: добавляет новое интервью новое интервью
      operationId: create-interview
      parameters:
      - description: interview
        in: body
        name: interview
        required: true
        schema:
          $ref: '#/definitions/model.Interview'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new item to the interview list
      tags:
      - interviews
  /lectures:
    get:
      description: возвращает все лекции
      operationId: get-all-lectures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LectureList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the lecture list
      tags:
      - lectures
    post:
      description: добавляет лекцию
      operationId: create-lecture
      parameters:
      - description: lecture
        in: body
        name: lecture
        required: true
        schema:
          $ref: '#/definitions/model.Lecture'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new lecture to the lecture list
      tags:
      - lectures
  /lectures/{id}:
    delete:
      description: удалаяет лекцию с указанным id
      operationId: delete-lecture-by-id
      parameters:
      - description: lecture id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a lecture by ID
      tags:
      - lectures
    get:
      description: возвращает лекцию с указанным id
      operationId: get-lecture-by-id
      parameters:
      - description: lecture id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Lecture'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a lecture by ID
      tags:
      - lectures
    put:
      description: изменяет лекцию с указанным id
      operationId: update-lecture-by-id
      parameters:
      - description: lecture id
        in: path
        name: id
        required: true
        type: string
      - description: lecture
        in: body
        name: lecture
        required: true
        schema:
          $ref: '#/definitions/model.Lecture'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a lecture by ID
      tags:
      - lectures
  /lectures/{lecture_id}/homeworks:
    get:
      description: возвращает домашнюю работы по указанному id лекции
      operationId: get-homeworks-by-lecture-id
      parameters:
      - description: lecture id
        in: path
        name: lecture_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HomeworkList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get items in the homework list by lecture ID
      tags:
      - homeworks
  /log/operations:
    get:
      description: возвращает все операции
      operationId: get-all-operations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Operation'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the operations list
      tags:
      - operations
    post:
      description: добавляет новую операцию
      operationId: create-operation
      parameters:
      - description: operation
        in: body
        name: operation
        required: true
        schema:
          $ref: '#/definitions/model.Operation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new item to the operations list
      tags:
      - operations
  /log/operations/types:
    get:
      description: возвращает все типы операций
      operationId: get-all-operation-types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OperationType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the operation type list
      tags:
      - operationTypes
    post:
      description: добавляет новый тип операции
      operationId: create-operation-type
      parameters:
      - description: operation-type
        in: body
        name: operation-type
        required: true
        schema:
          $ref: '#/definitions/model.OperationType'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new item to the operation types list
      tags:
      - operationTypes
  /log/operations/types/{id}:
    delete:
      description: удаляет тип операции с указанным id
      operationId: delete-operation-type-by-id
      parameters:
      - description: operation type id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a operation type by ID
      tags:
      - operationTypes
    get:
      description: возвращает тип операции с указанным id
      operationId: get-operation-type-by-id
      parameters:
      - description: operation-type id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperationType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a operation type by ID
      tags:
      - operationTypes
    post:
      operationId: update-operation-type-by-id
      parameters:
      - description: operation type id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: type
        required: true
        schema:
          $ref: '#/definitions/model.OperationType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a operation type by ID
      tags:
      - operationTypes
    put:
      description: изменяет тип указанному операции с указанным id
      operationId: update-operation-type-by-id
      parameters:
      - description: operation type id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: operation_type
        required: true
        schema:
          $ref: '#/definitions/model.OperationType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a operation type by ID
      tags:
      - operationTypes
  /logs:
    get:
      description: возвращает все логи по операциям
      operationId: get-all-operation-logs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.OperationLog'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the operation log list
      tags:
      - operationLogs
    post:
      description: добавляет новый операционный лог
      operationId: create-operation-log
      parameters:
      - description: operation-log
        in: body
        name: operation-log
        required: true
        schema:
          $ref: '#/definitions/model.OperationLog'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new item to the operation logs list
      tags:
      - operationLogs
  /logs/{id}:
    delete:
      description: удаляет лог операции с указанным id
      operationId: delete-operation-log-by-id
      parameters:
      - description: operation log id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a operation log by ID
      tags:
      - operationLogs
    get:
      description: возвращает лог операции с указанным id
      operationId: get-operation-log-by-id
      parameters:
      - description: operation-log id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.OperationLog'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a operation log by ID
      tags:
      - operationLogs
    post:
      description: изменяет лог операции с указанным id
      operationId: update-operation-log-by-id
      parameters:
      - description: operation log id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/model.OperationLog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a operation log by ID
      tags:
      - operationLogs
    put:
      operationId: update-operation-log-by-id
      parameters:
      - description: operation log id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/model.OperationLog'
      - description: role
        in: body
        name: operation_log
        required: true
        schema:
          $ref: '#/definitions/model.OperationLog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a operation log by ID
      tags:
      - operationLogs
  /logs/operations/{id}:
    delete:
      description: удаляет операцию по указанному id
      operationId: delete-operation-by-id
      parameters:
      - description: operation id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a operation by ID
      tags:
      - operations
    get:
      description: возвращает операцию с указанным id
      operationId: get-operation-by-id
      parameters:
      - description: operation id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Operation'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a operation by ID
      tags:
      - operations
    post:
      operationId: update-operation-by-id
      parameters:
      - description: operation id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: operation
        required: true
        schema:
          $ref: '#/definitions/model.Operation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a operation by ID
      tags:
      - operations
    put:
      description: изменяет операцию по указанному id
      operationId: update-operation-by-id
      parameters:
      - description: operation id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: operation
        required: true
        schema:
          $ref: '#/definitions/model.Operation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a operation by ID
      tags:
      - operations
  /mentors:
    get:
      description: получить список всех менторов
      operationId: get-all-mentors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all mentors
      tags:
      - mentors
  /mentors/{mentor_id}:
    delete:
      description: удалить пользователя из группы менторов
      operationId: delete-mentor-by-id
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete mentor by mentor id
      tags:
      - mentors
    get:
      description: получить данные о менторе по его id, выдает структуру person
      operationId: get-mentor-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get mentor by mentor id
      tags:
      - mentors
  /mentors/{mentor_id}/notes:
    get:
      description: получить все заметки, оставленные конкретным ментором
      operationId: get-all-notes-from-mentor
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorNotesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all notes from concrete mentor
      tags:
      - mentorNotes
  /mentors/{mentor_id}/notes/{mentor_note_id}:
    get:
      description: получить определенную заметку, оставленную ментором
      operationId: get-note-from-mentor
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      - description: mentor_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorNotesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get concrete note of mentor
      tags:
      - mentorNotes
  /mentors/{person_id}:
    post:
      description: добавить пользователя в группу менторов по его person_id
      operationId: add-mentor
      parameters:
      - description: mentor
        in: body
        name: mentor
        required: true
        schema:
          $ref: '#/definitions/model.Mentor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add mentor
      tags:
      - mentors
    put:
      description: изменить пользователя группы "менторы"
      operationId: гзвфеу-mentor
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      - description: mentor
        in: body
        name: mentor
        required: true
        schema:
          $ref: '#/definitions/model.Mentor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update mentor by mentor id
      tags:
      - mentors
  /mentors/notes:
    get:
      description: получить все заметки всех менторов про всех студентов
      operationId: get-all-mentor-notes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorNotesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all mentor notes
      tags:
      - mentorNotes
  /mentors/notes/:
    post:
      description: добавить менторскую заметку для студента
      operationId: add-mentor-note
      parameters:
      - description: new_mentor_note
        in: body
        name: mentor_note
        required: true
        schema:
          $ref: '#/definitions/model.NewMentorNoteDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new mentor note
      tags:
      - mentorNotes
    put:
      description: изменить менторскую заметку
      operationId: update-mentor-note
      parameters:
      - description: update_mentor_note
        in: body
        name: mentor_note
        required: true
        schema:
          $ref: '#/definitions/model.MentorNote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update mentor note
      tags:
      - mentorNotes
  /mentors/notes/{mentor_note_id}:
    delete:
      description: удалить заметку ментора
      operationId: delete-note-from-mentor
      parameters:
      - description: mentor_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete mentor note
      tags:
      - mentorNotes
  /persons:
    get:
      description: возвращает список всех пользователей
      operationId: get-persons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PersonListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all person from database
      tags:
      - persons
    post:
      description: добавляет нового пользователя
      operationId: add-new-person
      parameters:
      - description: person
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.NewPersonDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new person to database
      tags:
      - persons
  /persons/{person_id}:
    delete:
      description: удаляет пользователя с указанным id<
      operationId: delete-person-by-id
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete person by id
      tags:
      - persons
    get:
      description: возвращает данные о пользователе с указанным id
      operationId: get-person-by-id
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get person by id
      tags:
      - persons
    put:
      description: изменяет данные пользователя с указанным id
      operationId: update-person-by-id
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      - description: person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/model.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update person by id
      tags:
      - persons
  /persons/{person_id}/contacts:
    get:
      description: возвращает все контакты пользователя с указанным person_id
      operationId: get-person-contacts
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all person's contacts
      tags:
      - contacts
  /persons/{person_id}/contacts/{contact_id}:
    get:
      description: возвращает контакт c указанным contact_id пользователя с указанным
        person_id
      operationId: get-person-contact
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      - description: contact_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Contact'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get person's contact by contact_id
      tags:
      - contacts
  /persons/contacts:
    get:
      description: возвращает все контакты всех пользователей
      operationId: get-all-contacts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all contacts
      tags:
      - contacts
    post:
      description: создает новый пользовательский контакт
      operationId: add-person-contact
      parameters:
      - description: contact
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/model.Contact'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new person contact
      tags:
      - contacts
    put:
      description: изменяет пользовательский контакт
      operationId: put-person-contact
      parameters:
      - description: contact
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/model.Contact'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new person contact
      tags:
      - contacts
  /persons/contacts/{contact_id}:
    delete:
      description: удаляет контакт c указанным contact_id
      operationId: delete-person-contact
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete person's contact by contact_id
      tags:
      - contacts
  /persons/contacts/types:
    get:
      description: возвращает все типы контактов
      operationId: get-all-contact-types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactTypesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all contact types
      tags:
      - contactTypes
    post:
      description: добавляет новый тип контакта
      operationId: add-contact-type
      parameters:
      - description: contact_type
        in: body
        name: contact_type
        required: true
        schema:
          $ref: '#/definitions/model.NewContactTypeDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get contact type
      tags:
      - contactTypes
    put:
      description: изменяет тип контакта
      operationId: update-contact-type
      parameters:
      - description: contact_type
        in: body
        name: contact_type
        required: true
        schema:
          $ref: '#/definitions/model.ContactType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update contact type
      tags:
      - contactTypes
  /persons/contacts/types/{:contact_type_id}:
    delete:
      description: удаляет тип контакта с указанным contact_type_id
      operationId: delete-contact-type
      parameters:
      - description: contact_type_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete contact type
      tags:
      - contactTypes
  /persons/contacts/types/{contact_type_id}:
    get:
      description: возвращает тип контакта с указанным contact_type_id
      operationId: get-contact-type
      parameters:
      - description: contact_type_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ContactType'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get contact type
      tags:
      - contactTypes
  /roles:
    get:
      description: возвращает все роли
      operationId: get-all-roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the role list
      tags:
      - roles
    post:
      description: добавляет новую роль
      operationId: create-role
      parameters:
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.RoleCU'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new role to the course list
      tags:
      - roles
  /roles/{id}:
    delete:
      description: удаляет роль с указанным id
      operationId: delete-role-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a role by ID
      tags:
      - roles
    get:
      description: возвращает роль с указанным id
      operationId: get-role-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a role by ID
      tags:
      - roles
    post:
      operationId: update-role-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.RoleCU'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a role by ID
      tags:
      - roles
    put:
      description: изменяет роль с указанным id
      operationId: put-role-by-id
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: put a role by ID
      tags:
      - roles
  /student-certificates:
    get:
      operationId: get-all-student-certificates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentCertificateList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the student certificate list
      tags:
      - students
  /students:
    get:
      description: возвращает список всех пользователей группы "student"
      operationId: get-all-students
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all students
      tags:
      - students
  /students/{person_id}:
    post:
      description: добавить пользователя в группу студентов
      operationId: add-person-to-students
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add person to students
      tags:
      - students
  /students/{student_id}:
    delete:
      description: удалить пользователя с указанным id is группы "студенты"
      operationId: delete-person-from-students
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete person from students
      tags:
      - students
    get:
      description: получить данные о студенте по его id, возвращает структуру person
      operationId: get-student-by-student-id
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student by student id
      tags:
      - students
    put:
      description: пока не слишком понятно, нужен ли этот хендлер
      operationId: update-student-by-student-id
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student by student id
      tags:
      - students
  /students/{student_id}/certificates:
    get:
      operationId: get-student-certificates-by-student-id
      parameters:
      - description: student id
        in: path
        name: student_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentCertificateList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get items in the student certificate list by student ID
      tags:
      - students
  /students/{student_id}/certificates/{certificate_od}:
    get:
      description: возвращает сертификат студента с указанным id
      operationId: get-student-certificate
      parameters:
      - description: certificate_id
        in: path
        name: id
        required: true
        type: string
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentCertificate'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student certificate
      tags:
      - students
      - certificates
  /students/{student_id}/homeworks:
    get:
      description: возвращает все домашние работы студента с указанным student_id
      operationId: get-all-student-homeworks
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentHomeworksListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get contact type
      tags:
      - studentHomeworks
  /students/{student_id}/homeworks/{homework_id}:
    get:
      description: возвращает определенную домашку указанного студента
      operationId: get-student-homework
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      - description: homework_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentHomework'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student's homework
      tags:
      - studentHomeworks
  /students/{student_id}/notes:
    get:
      description: возвращает все заметки по студенту с указанным id
      operationId: get-student-notes
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNotesListDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all student notes by student id
      tags:
      - studentNotes
    post:
      description: добавляет заметку студента
      operationId: add-new-student-note
      parameters:
      - description: student_note
        in: body
        name: student_note
        required: true
        schema:
          $ref: '#/definitions/model.NewStudentNoteDto'
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new note to student
      tags:
      - studentNotes
  /students/{student_id}/notes/{student_note_id}:
    get:
      description: возвращает заметку с указанным id для студента с указанным id
      operationId: get-student-note-by-student-note-id
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      - description: student_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNote'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get concrete student's note from concrete student
      tags:
      - studentNotes
    put:
      description: изменяет заметку студента с указанным id студента
      operationId: update-student-note
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      - description: student_note_id
        in: path
        name: id
        required: true
        type: string
      - description: student_note
        in: body
        name: student_note
        required: true
        schema:
          $ref: '#/definitions/model.NewStudentNoteDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student note
      tags:
      - studentNotes
  /students/certificates:
    post:
      description: добавляет новый сертификат студента
      operationId: add-student-certificate
      parameters:
      - description: certificate
        in: body
        name: certificate
        required: true
        schema:
          $ref: '#/definitions/model.StudentCertificate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add student certificate
      tags:
      - students
      - certificates
    put:
      description: изменяет новый сертификат студента
      operationId: put-student-certificate
      parameters:
      - description: certificate
        in: body
        name: certificate
        required: true
        schema:
          $ref: '#/definitions/model.StudentCertificate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student certificate
      tags:
      - students
      - certificates
  /students/certificates/{certificate_id}:
    delete:
      description: удаляет сертификат студента
      operationId: delete-student-certificate
      parameters:
      - description: certificate_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student certificate
      tags:
      - students
      - certificates
  /students/certificates/courses/{course_id}:
    get:
      description: возвращает сертификаты курса
      operationId: get-course-certificates
      parameters:
      - description: course_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentCertificatesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get certificates by course
      tags:
      - students
      - certificates
      - courses
  /students/groups:
    get:
      description: возвращает список всех студенческих групп
      operationId: get-student-groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentGroupListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all student groups
      tags:
      - students
      - studentGroups
    post:
      description: добавляет новую студенческую группу
      operationId: add-student-group
      parameters:
      - description: student_group
        in: body
        name: student_group
        required: true
        schema:
          $ref: '#/definitions/model.StudentGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new student group
      tags:
      - students
      - studentGroups
  /students/groups/{group_id}:
    delete:
      description: удаляет студенческую группу с указанным id
      operationId: delete-student-group-by-id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student group by id
      tags:
      - students
      - studentGroups
    get:
      description: возвращает группу с указанным id
      operationId: get_student_group_by_id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentGroup'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student group by id
      tags:
      - students
      - studentGroups
    put:
      description: изменяет данные студенческой группы
      operationId: update-student-group-by-id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      - description: student_group
        in: body
        name: student_group
        required: true
        schema:
          $ref: '#/definitions/model.StudentGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student group by group id
      tags:
      - students
      - studentGroups
  /students/homeworks:
    get:
      description: возвращает все домашние работы всех студентов в виде списка
      operationId: get-students-homeworks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentHomeworksListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all homeworks
      tags:
      - studentHomeworks
    post:
      description: добавляет новый тип контакта
      operationId: add-contact-type
      parameters:
      - description: contact_type
        in: body
        name: contact_type
        required: true
        schema:
          $ref: '#/definitions/model.NewContactTypeDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get contact type
      tags:
      - studentHomeworks
    put:
      description: изменяет домашнюю работу студента
      operationId: update-student-homework
      parameters:
      - description: student_homework
        in: body
        name: student_homework
        required: true
        schema:
          $ref: '#/definitions/model.StudentHomework'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student homework
      tags:
      - studentHomeworks
  /students/homeworks/{:contact_type_id}:
    delete:
      description: удаляет домашнюю работу студента
      operationId: delete-student-homework
      parameters:
      - description: student_homework_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student homework
      tags:
      - studentHomeworks
  /students/notes/{student_note_id}:
    delete:
      description: удаляет заметку студента с указанным id студента
      operationId: delete-student-note
      parameters:
      - description: student_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student note
      tags:
      - studentNotes
  /students/notes/types:
    get:
      description: возвращает все типы студенческих заметок
      operationId: get-all-student-note-types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNoteTypesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get list of student note types
      tags:
      - studentNoteTypes
    post:
      description: добавляет новый тип студенческой заметки
      operationId: create-note-types
      parameters:
      - description: student note type
        in: body
        name: new_student_note_type
        required: true
        schema:
          $ref: '#/definitions/model.NewStudentNoteTypeDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new student type note
      tags:
      - studentNoteTypes
  /students/notes/types/{student_note_type_id}:
    delete:
      description: удаляет тип заметки студента по id
      operationId: delete-student-note-type-by-id
      parameters:
      - description: student_note_type_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student note type by id
      tags:
      - studentNoteTypes
    get:
      description: возвращает тип студенческой заметки с указанным id
      operationId: get-student-student-note-type-by-id
      parameters:
      - description: Student_note_type_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNoteType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student note type by id
      tags:
      - studentNoteTypes
    put:
      description: изменяет тип студенческой заметки с указанным id
      operationId: update-student-note-type
      parameters:
      - description: student_note_type_id
        in: path
        name: id
        required: true
        type: string
      - description: student note type
        in: body
        name: student_note_type
        required: true
        schema:
          $ref: '#/definitions/model.StudentNoteType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student note type
      tags:
      - studentNoteTypes
schemes:
- http
swagger: "2.0"
