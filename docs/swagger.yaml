basePath: /api/v1
definitions:
  model.Course:
    properties:
      end_date:
        type: string
      id:
        type: integer
      start_date:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  model.CourseLecture:
    properties:
      course_id:
        type: integer
      lecture_id:
        type: integer
    type: object
  model.CourseLecturesListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      course_lectures:
        items:
          $ref: '#/definitions/model.CourseLecture'
        type: array
    type: object
  model.CourseList:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      courses:
        items:
          $ref: '#/definitions/model.Course'
        type: array
    type: object
  model.CourseStatus:
    properties:
      course_status_id:
        type: integer
      title:
        maxLength: 20
        minLength: 2
        type: string
    type: object
  model.CourseStatusesListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      courseStatusList:
        items:
          $ref: '#/definitions/model.CourseStatus'
        type: array
    type: object
  model.GroupContact:
    properties:
      contact_type_id:
        maximum: 7
        type: integer
      contact_value:
        maxLength: 70
        minLength: 2
        type: string
      group_contact_id:
        type: integer
      group_id:
        type: integer
      is_primary:
        type: boolean
    required:
    - is_primary
    type: object
  model.GroupContactsAddDto:
    properties:
      contact_type_id:
        maximum: 7
        type: integer
      contact_value:
        maxLength: 70
        minLength: 2
        type: string
      group_id:
        type: integer
      is_primary:
        type: boolean
    required:
    - is_primary
    type: object
  model.GroupContactsListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      groupContacts:
        items:
          $ref: '#/definitions/model.GroupContact'
        type: array
    type: object
  model.Mentor:
    properties:
      mentor_id:
        type: integer
    type: object
  model.MentorNote:
    properties:
      created_at:
        type: string
      mentor_id:
        type: integer
      mentor_note_id:
        type: integer
      note:
        maxLength: 255
        minLength: 2
        type: string
      student_id:
        type: integer
    type: object
  model.MentorNotesListDto:
    properties:
      mentorNoteList:
        items:
          $ref: '#/definitions/model.MentorNote'
        type: array
    type: object
  model.MentorsListDto:
    properties:
      mentorList:
        items:
          $ref: '#/definitions/model.Mentor'
        type: array
    type: object
  model.NewMentorNoteDto:
    properties:
      created_at:
        type: string
      mentor_id:
        type: integer
      note:
        maxLength: 255
        minLength: 2
        type: string
      student_id:
        type: integer
    type: object
  model.NewPersonDto:
    properties:
      firsName:
        type: string
      lastName:
        type: string
      login:
        type: string
      passwd:
        type: string
      patronymic:
        type: string
      roleId:
        type: string
    type: object
  model.NewStudentNoteDto:
    properties:
      created_at:
        type: string
      note:
        maxLength: 255
        minLength: 2
        type: string
    type: object
  model.NewStudentNoteTypeDto:
    properties:
      title:
        maxLength: 10
        minLength: 2
        type: string
    type: object
  model.PaginationResponse:
    properties:
      page:
        type: integer
      page_count:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
    type: object
  model.Person:
    properties:
      deleted:
        type: boolean
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      login:
        maxLength: 50
        minLength: 2
        type: string
      passwd:
        maxLength: 20
        minLength: 8
        type: string
      patronymic:
        maxLength: 50
        minLength: 2
        type: string
      person_id:
        type: integer
      role_id:
        maximum: 6
        minimum: 1
        type: integer
      updated_at:
        type: string
    required:
    - first_name
    - last_name
    - login
    - passwd
    - role_id
    type: object
  model.PersonListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      persons_dto:
        items:
          $ref: '#/definitions/model.Person'
        type: array
    type: object
  model.ResponseMessage:
    properties:
      id:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  model.Student:
    properties:
      student_id:
        minimum: 0
        type: integer
    required:
    - student_id
    type: object
  model.StudentGroup:
    properties:
      group_id:
        type: integer
      student_id:
        type: integer
    type: object
  model.StudentGroupListDto:
    properties:
      _metadata:
        $ref: '#/definitions/model.PaginationResponse'
      student_group_list:
        items:
          $ref: '#/definitions/model.StudentGroup'
        type: array
    type: object
  model.StudentNote:
    properties:
      created_at:
        type: string
      note:
        maxLength: 255
        minLength: 2
        type: string
      student_id:
        type: integer
      student_note_id:
        type: integer
      student_note_type_id:
        type: integer
    type: object
  model.StudentNoteType:
    properties:
      student_note_type_id:
        type: integer
      title:
        maxLength: 10
        minLength: 2
        type: string
    type: object
  model.StudentNoteTypesListDto:
    properties:
      studentNoteTypeList:
        items:
          $ref: '#/definitions/model.StudentNoteType'
        type: array
    type: object
  model.StudentNotesListDto:
    properties:
      studentId:
        type: integer
      studentNoteList:
        items:
          $ref: '#/definitions/model.StudentNote'
        type: array
    type: object
  model.StudentsListDto:
    properties:
      studentList:
        items:
          $ref: '#/definitions/model.Student'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: '### _API for student info collection service._'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: GolangUnitedSchool
  version: "1.0"
paths:
  /courses:
    get:
      operationId: get-all-courses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all items in the course list
      tags:
      - courses
    post:
      operationId: create-course
      parameters:
      - description: course
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.Course'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new course to the course list
      tags:
      - courses
  /courses/{course_id}/lectures:
    get:
      description: возвращает все лекции определенного курса
      operationId: get-course-lectures-by-course-id
      parameters:
      - description: course_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseLecturesListDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a course lecture by id
      tags:
      - courses
      - courseLectures
  /courses/{course_id}/lectures/{lecture_id}:
    get:
      description: возвращает лекцию с указанным lecture_id с курса course_id
      operationId: get-lecture-by-id-from-course
      parameters:
      - description: course_id
        in: path
        name: course_id
        required: true
        type: string
      - description: lecture_id
        in: path
        name: lecture_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseLecture'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get concrete lecture from course
      tags:
      - courses
      - courseLectures
  /courses/{id}:
    delete:
      operationId: delete-course-by-id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a course by ID
      tags:
      - courses
    get:
      operationId: get-course_by_id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Course'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get a course by ID
      tags:
      - courses
    post:
      operationId: update-course-by-id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update a course by ID
      tags:
      - courses
  /courses/lectures:
    get:
      description: возвращает список всех лекций всех курсов
      operationId: get-all-course-lectures
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseLecturesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all course lectures
      tags:
      - courses
      - courseLectures
    post:
      description: добавить новую лекцию на курс
      operationId: add-course-lecture-by-id
      parameters:
      - description: course_lecture
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.CourseLecture'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new course lecture
      tags:
      - courses
      - courseLectures
  /courses/lectures/{lecture_id}:
    delete:
      description: удалить лекцию с указанным lecture_id
      operationId: delete-course-lecture-by-id
      parameters:
      - description: course_lecture_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete a course lecture by id
      tags:
      - courses
      - courseLectures
    put:
      description: отредактировать лекцию курса с указанным lecture_id
      operationId: update-course-lecture-by-id
      parameters:
      - description: lecture_id
        in: path
        name: id
        required: true
        type: string
      - description: course_lecture
        in: body
        name: lecture
        required: true
        schema:
          $ref: '#/definitions/model.CourseLecture'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update course lecture by id
      tags:
      - courses
      - courseLectures
  /courses/statuses:
    get:
      description: возвращает список всех статусов курса
      operationId: get-all-course-statuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseStatusesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all course statuses
      tags:
      - courses
      - courseStatuses
    post:
      description: создает новый статус курса
      operationId: add-course-status
      parameters:
      - description: new_course_status
        in: body
        name: new_course_status
        required: true
        schema:
          $ref: '#/definitions/model.CourseStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new course status
      tags:
      - courses
      - courseStatuses
  /courses/statuses/{status_id}:
    delete:
      description: удаляет статус курса с указанным status_id
      operationId: delete-course-status
      parameters:
      - description: status_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete course status
      tags:
      - courses
      - courseStatuses
    get:
      description: возвращает статус курса с status_id
      operationId: get-course-status
      parameters:
      - description: status_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CourseStatus'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get course status by id
      tags:
      - courses
      - courseStatuses
    put:
      description: изменяет статус курса с указанным status_id
      operationId: put-course-status
      parameters:
      - description: status_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update course status
      tags:
      - courses
      - courseStatuses
  /groups/{group_id}/contacts:
    get:
      description: возвращает все контакты группы с указанным group_id
      operationId: get-group-contacts-by-id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GroupContactsListDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get group contacts by  group id
      tags:
      - groups
      - groupContacts
  /groups/{group_id}/contacts/{group_contact_id}:
    get:
      description: возвращает контакт group_contact_id группы с group_id
      operationId: get-group-contact
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      - description: group_contact_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GroupContact'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get group contact
      tags:
      - groups
      - groupContacts
  /groups/contacts:
    get:
      description: возвращает все контакты всех группы
      operationId: get-all-groups-contacts
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GroupContactsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all group contacts
      tags:
      - groups
      - groupContacts
    post:
      description: добавляет новый контакт группы
      operationId: add-group-contact
      parameters:
      - description: group contact
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/model.GroupContactsAddDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new group contact
      tags:
      - groups
      - groupContacts
  /groups/contacts/{group_contact_id}:
    delete:
      description: удаляет контакт группы
      operationId: delete-group-contact-by-id
      parameters:
      - description: group_contact_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete group contact by id
      tags:
      - groups
      - groupContacts
    put:
      description: изменяет контакт группы
      operationId: update-group-contact-by-id
      parameters:
      - description: group_contact_id
        in: path
        name: id
        required: true
        type: string
      - description: group contact
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/model.GroupContactsAddDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update group contact
      tags:
      - groups
      - groupContacts
  /mentors:
    get:
      description: получить список всех менторов
      operationId: get-all-mentors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all mentors
      tags:
      - mentors
  /mentors/{mentor_id}:
    delete:
      description: удалить пользователя из группы менторов
      operationId: delete-mentor-by-id
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete mentor by mentor id
      tags:
      - mentors
    get:
      description: получить данные о менторе по его id, выдает структуру person
      operationId: get-mentor-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get mentor by mentor id
      tags:
      - mentors
  /mentors/{mentor_id}/notes:
    get:
      description: получить все заметки, оставленные конкретным ментором
      operationId: get-all-notes-from-mentor
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorNotesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all notes from concrete mentor
      tags:
      - mentor_notes
  /mentors/{mentor_id}/notes/{mentor_note_id}:
    get:
      description: получить определенную заметку, оставленную ментором
      operationId: get-note-from-mentor
      parameters:
      - description: mentor_id
        in: path
        name: id
        required: true
        type: string
      - description: mentor_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorNotesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get concrete note of mentor
      tags:
      - mentor_notes
  /mentors/{person_id}:
    post:
      description: добавить пользователя в группу менторов по его person_id
      operationId: add-mentor
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add mentor
      tags:
      - mentors
  /mentors/notes:
    get:
      description: получить все заметки всех менторов про всех студентов
      operationId: get-all-mentor-notes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MentorNotesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all mentor notes
      tags:
      - mentor_notes
  /mentors/notes/:
    post:
      description: добавить менторскую заметку для студента
      operationId: add-mentor-note
      parameters:
      - description: new_mentor_note
        in: body
        name: mentor_note
        required: true
        schema:
          $ref: '#/definitions/model.NewMentorNoteDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new mentor note
      tags:
      - mentor_notes
    put:
      description: изменить менторскую заметку
      operationId: update-mentor-note
      parameters:
      - description: update_mentor_note
        in: body
        name: mentor_note
        required: true
        schema:
          $ref: '#/definitions/model.MentorNote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update mentor note
      tags:
      - mentor_notes
  /mentors/notes/{mentor_note_id}:
    delete:
      description: удалить заметку ментора
      operationId: delete-note-from-mentor
      parameters:
      - description: mentor_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete mentor note
      tags:
      - mentor_notes
  /persons:
    get:
      description: возвращает список всех пользователей
      operationId: get-persons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PersonListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all person from database
      tags:
      - persons
    post:
      description: добавляет нового пользователя
      operationId: add-new-person
      parameters:
      - description: person
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.NewPersonDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new person to database
      tags:
      - persons
  /persons/{person_id}:
    delete:
      description: удаляет пользователя с указанным id<
      operationId: delete-person-by-id
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete person by id
      tags:
      - persons
    get:
      description: возвращает данные о пользователе с указанным id
      operationId: get-person-by-id
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get person by id
      tags:
      - persons
    put:
      description: изменяет данные пользователя с указанным id
      operationId: update-person-by-id
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      - description: person
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/model.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update person by id
      tags:
      - persons
  /students:
    get:
      description: возвращает список всех пользователей группы "student"
      operationId: get-all-students
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentsListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all students
      tags:
      - students
  /students/{person_id}:
    post:
      description: добавить пользователя в группу студентов
      operationId: add-person-to-students
      parameters:
      - description: person_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add person to students
      tags:
      - students
  /students/{student_id}:
    delete:
      description: удалить пользователя с указанным id is группы "студенты"
      operationId: delete-person-from-students
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete person from students
      tags:
      - students
    get:
      description: получить данные о студенте по его id, возвращает структуру person
      operationId: get-student-by-student-id
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Person'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student by student id
      tags:
      - students
    put:
      description: пока не слишком понятно, нужен ли этот хендлер
      operationId: update-student-by-student-id
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student by student id
      tags:
      - students
  /students/{student_id}/notes:
    get:
      operationId: get-student-notes
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNotesListDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all student notes by student id
      tags:
      - student_notes
    post:
      operationId: add-new-student-note
      parameters:
      - description: student_note
        in: body
        name: student_note
        required: true
        schema:
          $ref: '#/definitions/model.NewStudentNoteDto'
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new note to student
      tags:
      - student_notes
  /students/{student_id}/notes/{student_note_id}:
    get:
      operationId: get-student-note-by-student-note-id
      parameters:
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      - description: student_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNote'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get concrete student's note from concrete student
      tags:
      - student_notes
    put:
      operationId: update-student-note
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      - description: student_id
        in: path
        name: id
        required: true
        type: string
      - description: student_note_id
        in: path
        name: id
        required: true
        type: string
      - description: student_note
        in: body
        name: student_note
        required: true
        schema:
          $ref: '#/definitions/model.NewStudentNoteDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student note
      tags:
      - student_notes
  /students/groups:
    get:
      description: возвращает список всех студенческих групп
      operationId: get-student-groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentGroupListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get all student groups
      tags:
      - students
      - studentGroups
    post:
      description: добавляет новую студенческую группу
      operationId: add-student-group
      parameters:
      - description: student_group
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/model.StudentGroup'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new student group
      tags:
      - students
      - studentGroups
  /students/groups/{group_id}:
    delete:
      description: удаляет студенческую группу с указанным id
      operationId: delete-student-group-by-id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student group by id
      tags:
      - students
      - studentGroups
    get:
      description: возвращает группу с указанным id
      operationId: get_student_group_by_id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentGroup'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student group by id
      tags:
      - students
      - studentGroups
    put:
      description: изменяет данные студенческой группы
      operationId: update-student-group-by-id
      parameters:
      - description: group_id
        in: path
        name: id
        required: true
        type: string
      - description: student_group
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.StudentGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student group by group id
      tags:
      - students
      - studentGroups
  /students/notes/{student_note_id}:
    delete:
      operationId: delete-student-note
      parameters:
      - description: student_note_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student note
      tags:
      - student_notes
  /students/notes/types:
    get:
      operationId: get-all-student-note-types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNoteTypesListDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get list of student note types
      tags:
      - student_note_types
    post:
      operationId: create-note-types
      parameters:
      - description: student note type
        in: body
        name: new_student_note_type
        required: true
        schema:
          $ref: '#/definitions/model.NewStudentNoteTypeDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: add new student type note
      tags:
      - student_note_types
  /students/notes/types/{student_note_type_id}:
    delete:
      description: удаляет тип заметки студента по id
      operationId: delete-student-note-type-by-id
      parameters:
      - description: student_note_type_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: delete student note type by id
      tags:
      - student_note_types
    get:
      operationId: get-student-student-note-type-by-id
      parameters:
      - description: Student_note_type_id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.StudentNoteType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: get student note type by id
      tags:
      - student_note_types
    put:
      operationId: update-student-note-type
      parameters:
      - description: student_note_type_id
        in: path
        name: id
        required: true
        type: string
      - description: student note type
        in: body
        name: student_note_type
        required: true
        schema:
          $ref: '#/definitions/model.StudentNoteType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseMessage'
      summary: update student note type
      tags:
      - student_note_types
schemes:
- http
swagger: "2.0"
